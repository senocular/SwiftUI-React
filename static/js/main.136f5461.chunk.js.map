{"version":3,"sources":["utils.js","SwiftUI.js","examples/namerizer/Themes.js","examples/namerizer/components.js","examples/namerizer/index.js","examples/namerizer/enums.js"],"names":["last","arr","length","undefined","componentStack","Types","CLASS","COMPONENT","CHILD","Strings","ERR_EMPTY_STACK","ERR_UNKNOWN_TYPE","VALUE_KEY","KEY_FIELD_KEY","DEFAULT_KEY_FIELD","renderComponent","type","props","executor","rendered","hasValue","arguments","value","index","collection","key","components","push","createElement","console","error","pop","react_default","a","react","map","_ref","renderComponents","renderChildrenToProps","children","childrenAll","isCollectionValue","Array","isArray","_objectSpread","SwiftUI","isValidElement","Comp","component","isClass","Boolean","prototype","isReactComponent","baseClass","Component","SwiftUIComponent","_target","_len","args","_key","this","constructor","instance","Reflect","construct","render","bind","_normalizeComponentAr","childrenExecutor","lastArg","count","Object","defineProperty","normalizeComponentArgs","_normalizeComponentAr2","slicedToArray","descriptor","Proxy","get","target","prop","_len2","_key2","setPrototypeOf","Themes","listModel","selectItem","title","alert","concat","items","uuid","subtitle","image","List","action","itemStyle","borderBottom","padding","cursor","_items$index","style","onClick","Image","margin","verticalAlign","src","alt","VStack","_ref2","alignment","display","flexDirection","alignItems","Text","text","_ref3","_ref3$color","color","_ref3$fontStyle","fontStyle","Content","_temp","_class","_Component","TextClass","_getPrototypeOf2","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","apply","myCount","inherits","createClass","View","model","item","ReactDOM","document","body","appendChild"],"mappings":"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","file":"static/js/main.136f5461.chunk.js","sourcesContent":["export function last(arr) {\n  return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n\nexport function isReactComponent(component) {\n  return Boolean(\n    typeof component === \"function\" &&\n      component.prototype &&\n      component.prototype.isReactComponent\n  );\n}\n","import React, {\n  createElement,\n  Component,\n  Fragment,\n  isValidElement\n} from \"react\";\nimport { last, isReactComponent } from \"./utils\";\n\n// Tracks SwiftUI component creation and\n// place in the component hierarchy\nconst componentStack = [];\n\n// Type associations made to SwiftUI components\n// that determines how they're rendered\nconst Types = {\n  CLASS: \"class\",\n  COMPONENT: \"component\",\n  CHILD: \"child\"\n};\n\n// User-facing strings\nconst Strings = {\n  ERR_EMPTY_STACK:\n    \"SwiftUI RenderError: Attempted to render a SwiftUI component without a valid SwiftUI component root. Make sure all SwiftUI components are being called within a SwiftUI ancestor added to the React DOM.\",\n  ERR_UNKNOWN_TYPE:\n    \"SwiftUI RenderError: Attempted to render a SwiftUI component of an unknown type.\"\n};\n\n// Special key values being accessed within\n// or sometimes added to user data\nconst VALUE_KEY = \"value\";\nconst KEY_FIELD_KEY = \"keyField\";\nconst DEFAULT_KEY_FIELD = \"id\";\n\n/**\n * Captures the values from an arguments array for a SwiftUI\n * component call returning values in well known positions.\n * @param {any[]} args Arguments provided to the original SwiftUI\n * component call.\n * @param {boolean} hasValue Whether or not the component definition\n * expects a value.\n * @returns {any[]} A normalized arguments array in the format\n * [value, props, childrenExecutor]\n */\nfunction normalizeComponentArgs(args, hasValue) {\n  let childrenExecutor = null;\n  const lastArg = last(args);\n  if (typeof lastArg === \"function\") {\n    childrenExecutor = lastArg;\n    args.pop();\n  }\n\n  let value = null;\n  let props;\n\n  const count = args.length;\n  if (count > 1) {\n    // (value, props [, childrenExecutor])\n\n    // even if the component was not defined with a value\n    // parameter (hasValue = false), the number of arguments\n    // is suggesting a value is getting passed in anyway\n\n    value = args[0];\n    props = {\n      ...args[1],\n      [VALUE_KEY]: value\n    };\n  } else if (count === 1) {\n    // (props|value [, childrenExecutor])\n\n    // If defined with a value or not defined with a value but\n    // the first argument meant for props is not an object, assume\n    // its intended to be a value and not a props object\n\n    if (hasValue || typeof args[0] !== \"object\") {\n      value = args[0];\n      props = { [VALUE_KEY]: value };\n    } else {\n      props = args[0];\n      if (VALUE_KEY in props) {\n        value = props[VALUE_KEY];\n      }\n    }\n  }\n\n  return [value, props || {}, childrenExecutor];\n}\n\n/**\n * Renders a component by calling its executor or creating a React\n * element using a class-based SwiftUIComponent.\n * @param {string} type Component type.\n * @param {object} props Props to send to the executor where applicable.\n * @param {Function|SwiftUIComponent} executor Component executor function\n * or component class.\n * @param {boolean} hasValue Whether or not the component definition\n * expects a value.\n * @param {any} value Value provided for the component.\n * @param {number} index Location within an iteration if rendering a\n * component in a loop.\n * @param {any[]} collection The collection of values being iterated through\n * if rendering the component in a value loop.\n * @returns {ReactElement} A React element representing the rendition\n * of the component.\n */\nfunction renderComponent(\n  type,\n  props,\n  executor,\n  hasValue = false,\n  value = null,\n  index = 0,\n  collection = null\n) {\n  let key = props.key || index;\n  let rendered; // return value from render (usually a React element)\n  const components = []; // SwiftUI components created within this component\n  componentStack.push(components);\n\n  try {\n    switch (type) {\n      // When a component is created from a class and\n      // called as a function.\n      // ex: Comp = SwiftUI(class); Comp();\n\n      case Types.CLASS: {\n        // Because classes have additional life-cycle methods,\n        // they need to be created as a React element rather\n        // than simply called as functions in order for those\n        // life-cycle methods to continue to function\n        // correctly. In this case, the executor is a\n        // SwiftUIComponent\n\n        rendered = createElement(executor, props);\n        break;\n      }\n\n      // When a component is created from a funtion and\n      // called as a function or when a component is\n      // created used as a React component\n      // ex: Comp = SwiftUI(function); Comp();\n      // ex: Comp = SwiftUI(class|function); <Comp />;\n\n      case Types.COMPONENT: {\n        rendered = hasValue ? executor(value, props) : executor(props);\n        break;\n      }\n\n      // When the \"component\" is, or an iteration of, the\n      // children block of another component call\n      // ex: Comp = SwiftUI(...); Comp(value[s], props, value[s] => { });\n\n      case Types.CHILD: {\n        // to help sync instances and reduce component churn\n        // try to identify a key for the rendered React components\n\n        if (value) {\n          const keyField =\n            props[KEY_FIELD_KEY] ||\n            (collection && collection[KEY_FIELD_KEY]) ||\n            DEFAULT_KEY_FIELD;\n          key = value[keyField] || key;\n        }\n\n        // children exutors call over values (if exist), not\n        // props, where if values are arrays, an executor is\n        // called like a map function.\n\n        rendered = hasValue\n          ? collection\n            ? executor(value, index, collection)\n            : executor(value)\n          : executor();\n        break;\n      }\n\n      default: {\n        console.error(Strings.ERR_UNKNOWN_TYPE, type);\n        rendered = null;\n        break;\n      }\n    }\n  } finally {\n    componentStack.pop();\n  }\n\n  if (!components.length && rendered == null) {\n    return null;\n  }\n\n  // The final result is a combination of the SwiftUI components\n  // used in this component followed by any React component the\n  // executor created and returned\n\n  return (\n    <Fragment key={key}>\n      {renderComponents(components)}\n      {rendered}\n    </Fragment>\n  );\n}\n\n/**\n * Renders multiple components.\n * @param {any[]} components Array of components to render, usually\n * from a component set pulled out of the componentStack.\n */\nfunction renderComponents(components) {\n  return components.map(({ type, props, executor, hasValue, value }, index) =>\n    renderComponent(type, props, executor, hasValue, value, index)\n  );\n}\n\n/**\n * Renders the children of a component adding them to a component's\n * props value, looping through multiple iterations of rendering the\n * children if the component was provided an array value.\n * @param {object} props Parent component props.\n * @param {boolean} hasValue Whether or not the component definition\n * expects a value.\n * @param {any} value Value provided to component.\n * @param {Function} executor Executor function for containing the\n * component children.\n * @returns {object} An updated props object containing an additional\n * children and childrenAll properties representing the children\n * components that were rendered.\n */\nfunction renderChildrenToProps(props, hasValue, value, executor) {\n  let children = props.children || null;\n  let childrenAll = children ? [children] : [];\n\n  if (executor) {\n    const isCollectionValue = hasValue && Array.isArray(value);\n    const collection = isCollectionValue ? value : null;\n    const values = isCollectionValue ? value : [value];\n\n    childrenAll = values.map((value, index) =>\n      renderComponent(\n        Types.CHILD,\n        props,\n        executor,\n        hasValue,\n        value,\n        index,\n        collection\n      )\n    );\n\n    children = childrenAll[0];\n  }\n\n  return { ...props, children, childrenAll };\n}\n\n/**\n * Creates a SwiftUI component or SwiftUI component element. SwiftUI\n * components are callable constructor functions with the name\n * SwiftUIComponent, though each component created is a unique and\n * separate version of a SwiftUIComponent definition.\n * @param {Function|ReactElement} executor Function, class, or React element\n * to transform into a SwiftUI component or SwiftUI component element.\n * @returns {Function|ReactElement} Returns a SwiftUI component constructor\n * function when given a function or a SwiftUI component element when given\n * a React element.\n */\nexport function SwiftUI(executor) {\n  // If called with a react element as the executor\n  // ex: SwiftUI(<MyComponent />)\n  // hijack the element's type and props and run it through\n  // a SwiftUI component to allow other uses of SwiftUI components\n  // within it and its children to render correctly\n\n  if (isValidElement(executor)) {\n    const Comp = SwiftUI(executor.type);\n    return <Comp {...executor.props} />;\n  }\n\n  // Get some information about the way the call is being\n  // made that helps determines how the component behaves\n\n  const isClass = isReactComponent(executor);\n  const baseClass = isClass ? executor : Component;\n  const hasValue = !isClass && executor.length > 1;\n\n  // The returned component definition which can be called\n  // as a function or be used as a class component\n\n  /**\n   * Constructor for SwiftUI components. Can be called as a\n   * function or used as a React component.\n   * @param {...any} args Arguments in variations of the format\n   * [value, props, childrenExecutor] where value or props may\n   * be omitted and where component executor arity determines\n   * which parameter is used when the other is not provided.\n   * @returns {Proxy} When called as a function, returns a proxy\n   * for the component's props. Methods called from this proxy\n   * represent the prop being set (method name = prop name) and\n   * its arguments the prop's value.\n   */\n  const SwiftUIComponent = function(...args) {\n    // When used as a react component\n    // ex: <SwiftUIComponent />\n    // because all SwiftUIComponents are defined as extending\n    // React's Component (or a class that already does) it will\n    // be instantiated with `new` when rendered by React and\n    // new.target will be defined\n\n    if (new.target) {\n      // super() for non-class constructor functions\n      const instance = Reflect.construct(baseClass, args, new.target);\n\n      // The render method is overridden to act as an executor that\n      // can handle rendering other SwiftUI component instances. If\n      // extending another class, that class's render method is used\n      // as the executor when rendering (i.e. super.render())\n\n      const render = isClass ? instance.render.bind(instance) : executor;\n      instance.render = function() {\n        return renderComponent(\n          Types.COMPONENT,\n          this.props,\n          render,\n          hasValue,\n          this.props[VALUE_KEY]\n        );\n      };\n      return instance;\n    }\n\n    // When the component is called as a function\n    // ex: SwiftUIComponent()\n\n    const [value, props, childrenExecutor] = normalizeComponentArgs(\n      args,\n      hasValue\n    );\n\n    const descriptor = {\n      type: isClass ? Types.CLASS : Types.COMPONENT,\n      props: renderChildrenToProps(props, hasValue, value, childrenExecutor),\n      executor: isClass ? SwiftUIComponent : executor,\n      hasValue,\n      value\n    };\n\n    // Add the component to the component list in\n    // the current place in the component hierarchy.\n    // When the parent component is finished rendering, it\n    // will process all the components at this level in\n    // the hierarchy to create React elements for each.\n\n    if (componentStack.length) {\n      const siblings = last(componentStack);\n      siblings.push(descriptor);\n    } else {\n      console.error(Strings.ERR_EMPTY_STACK, descriptor);\n    }\n\n    // Proxy used to allow arbitrary prop setting through\n    // methods called from the SwiftUI component call\n    // ex: SwiftUIComponent(...).myPropName(myPropValue)\n\n    return new Proxy(descriptor.props, {\n      get(target, prop) {\n        return function(...args) {\n          const count = args.length;\n          target[prop] = !count ? true : count === 1 ? args[0] : args;\n          return this;\n        };\n      }\n    });\n  };\n\n  // Manual inheritance set up since not using class syntax\n  // (not using class so SwiftUIComponent is callable)\n\n  Object.setPrototypeOf(SwiftUIComponent, baseClass);\n  Object.setPrototypeOf(SwiftUIComponent.prototype, baseClass.prototype);\n\n  return SwiftUIComponent;\n}\n","export const Themes = {\n  listModel: {\n    selectItem: title => alert(`Selected: ${title}!`),\n    items: [\n      {\n        uuid: \"item-0\",\n        title: \"Mountains\",\n        subtitle: \"7 Names\",\n        image:\n          \"https://user-images.githubusercontent.com/3536716/59119038-bc70a080-891f-11e9-94a2-fc2545454823.png\"\n      },\n      {\n        uuid: \"item-1\",\n        title: \"Big Cats\",\n        subtitle: \"9 Names\",\n        image:\n          \"https://user-images.githubusercontent.com/3536716/59119158-11141b80-8920-11e9-8d74-b01e448de7d4.png\"\n      },\n      {\n        uuid: \"item-2\",\n        title: \"Farms\",\n        subtitle: \"5 Names\",\n        image:\n          \"https://user-images.githubusercontent.com/3536716/59119177-183b2980-8920-11e9-9460-a6e29801e8d8.png\"\n      },\n      {\n        uuid: \"item-3\",\n        title: \"Food\",\n        subtitle: \"4 Names\",\n        image:\n          \"https://user-images.githubusercontent.com/3536716/59119190-238e5500-8920-11e9-97fa-5e96dff1c795.png\"\n      },\n      {\n        uuid: \"item-4\",\n        title: \"Beaches\",\n        subtitle: \"10 Names\",\n        image:\n          \"https://user-images.githubusercontent.com/3536716/59119209-2ab56300-8920-11e9-8388-b78c84a7dde0.png\"\n      },\n      {\n        uuid: \"item-5\",\n        title: \"Deserts\",\n        subtitle: \"7 Names\",\n        image:\n          \"https://user-images.githubusercontent.com/3536716/59119216-2ee18080-8920-11e9-92c9-f479bf001003.png\"\n      }\n    ]\n  }\n};\n","import React, { Component } from \"react\";\nimport { SwiftUI } from \"../../SwiftUI\";\n\nexport const List = SwiftUI((items, { action, childrenAll }) => {\n  const itemStyle = {\n    borderBottom: \"1px solid #efefef\",\n    padding: 5,\n    cursor: \"pointer\"\n  };\n  return (\n    <div>\n      {childrenAll.map((children, index) => {\n        const { uuid, title } = items[index];\n        return (\n          <div key={uuid} style={itemStyle} onClick={() => action(title)}>\n            {children}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n\nexport const Image = SwiftUI((image, props) => {\n  const style = {\n    margin: \"0 5px\",\n    verticalAlign: \"top\"\n  };\n  return <img style={style} src={image} alt=\"\" />;\n});\n\nexport const VStack = SwiftUI(({ alignment, children }) => {\n  const style = {\n    display: \"inline-flex\",\n    flexDirection: \"column\",\n    alignItems: alignment\n  };\n  return <v-stack style={style}>{children}</v-stack>;\n});\n\nexport const Text = SwiftUI(\n  (text, { color = \"black\", fontStyle = \"normal\" }) => {\n    return <span style={{ color, fontStyle }}>{text}</span>;\n  }\n);\n\nexport const TextNested = SwiftUI((text, props) => {\n  Text(text, props);\n});\n\nexport const TextClass = SwiftUI(\n  class TextClass extends Component {\n    static count = 0;\n    myCount = ++TextClass.count;\n\n    render() {\n      Text(this.props.text, this.props);\n      return <div>Instance #{this.myCount}</div>;\n    }\n  }\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { SwiftUI as View } from \"../../SwiftUI\";\nimport { Themes } from \"./Themes\";\nimport { List, Image, VStack, Text } from \"./components\";\nimport { Colors, Alignment } from \"./enums\";\n\nconst { leading } = Alignment;\nconst { gray } = Colors;\n\nconst Content = View(() => {\n  const model = Themes.listModel;\n\n  List(model.items, { action: model.selectItem }, item => {\n    Image(item.image);\n    VStack({ alignment: leading }, () => {\n      Text(item.title);\n      Text(item.subtitle).color(gray);\n    });\n  });\n});\n\nReactDOM.render(\n  <Content />,\n  document.body.appendChild(document.createElement(\"div\"))\n);\n","export const Alignment = {\n  leading: \"flex-start\",\n  center: \"center\",\n  trailing: \"flex-end\"\n};\n\nexport const Colors = {\n  red: \"red\",\n  green: \"green\",\n  blue: \"blue\",\n  white: \"white\",\n  gray: \"gray\",\n  black: \"black\"\n};\n"],"sourceRoot":""}